# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="catalyst"

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="false"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
export UPDATE_ZSH_DAYS=7

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  history-substring-search
  kubectl
  zsh-autosuggestions
  zsh-syntax-highlighting
) 
bindkey '^ ' autosuggest-accept

source $ZSH/oh-my-zsh.sh

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Bat
alias bat='batcat'

# Current working directory (cwd)
alias cwd='pwd | awk -F/ "{print \$NF}"'

# Proxy
PROXY_SRC='http://167.205.50.80:39154'
NO_PROXY_SRC='"localhost,127.0.0.1,itb.ac.id,.itb.ac.id,167.205."'
alias proxy_up='export ftp_proxy=$PROXY_SRC http_proxy=$PROXY_SRC https_proxy=$PROXY_SRC no_proxy=$NO_PROXY_SRC'
alias proxy_down='unset ftp_proxy http_proxy https_proxy no_proxy'

# Virtualenv
alias python_up='[ -s ~/python/bin/activate ] && source ~/python/bin/activate'
alias python_down='deactivate'

# Which
alias '?'='which'

# User configuration

# Ansible
export ANSIBLE_NOCOWS=1

# Ansible ARA
#export ara_location=$(python -c "import os,ara; print(os.path.dirname(ara.__file__))")
#export ANSIBLE_CALLBACK_PLUGINS=$ANSIBLE_CALLBACK_PLUGINS:$ara_location/plugins/callbacks
#export ANSIBLE_ACTION_PLUGINS=$ANSIBLE_ACTION_PLUGINS:$ara_location/plugins/actions
#export ANSIBLE_LIBRARY=$ANSIBLE_LIBRARY:$ara_location/plugins/modules

# Compilation flags
export ARCHFLAGS="-arch x86_64"

# Editor
# Preferred editor for local and remote sessions
export EDITOR='vim'
export VISUAL="vim"

# FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh || true

# Github
export GH=~/github.com/prasetiyohadi

# Gitlab
export GL=~/gitlab.com/prasetiyohadi

# Google Cloud SDK
# The next line updates PATH for the Google Cloud SDK.
if [ -f ~/.local/google-cloud-sdk/path.zsh.inc ]; then . ~/.local/google-cloud-sdk/path.zsh.inc; fi
# The next line enables shell command completion for gcloud.
if [ -f ~/.local/google-cloud-sdk/completion.zsh.inc ]; then . ~/.local/google-cloud-sdk/completion.zsh.inc; fi

# Golang
if [ -d ~/.local/go ] && [ -d ~/go ]; then
  export GOROOT=~/.local/go
  export GOPATH=~/go
  export PATH="$PATH:$GOROOT/bin:$GOPATH/bin"
fi

# GPG
if [[ ! "$(echo $OSTYPE | tr -d '[:digit:][:punct:]')" == "darwin" ]]; then
  [ -n "$GPG_TTY" ] && export GPG_TTY=$(tty)
  [ -n "$SSH_AUTH_SOCK" ] && export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
fi

# GRC
# Run the following command to enable GRC
# echo "export ENABLE_GRC=yes" >> ~/.zprofile
[[ -n "$ENABLE_GRC" && -s "/etc/grc.zsh" ]] && source /etc/grc.zsh || true

# Homebrew
## libffi
# libffi is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.
# For compilers to find libffi you may need to set:
#export LDFLAGS="-L/usr/local/opt/libffi/lib"
#export CPPFLAGS="-I/usr/local/opt/libffi/include"
# For pkg-config to find libffi you may need to set:
#export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig"
## unbound
# To have launchd start unbound now and restart at startup:
# sudo brew services start unbound
## perl
# By default non-brewed cpan modules are installed to the Cellar. If you wish
# for your modules to persist across updates we recommend using `local::lib`.
# You can set that up like this:
#   PERL_MM_OPT="INSTALL_BASE=$HOME/perl5" cpan local::lib
#eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib=$HOME/perl5)"
## sqlite
# sqlite is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.
# If you need to have sqlite first in your PATH run:
#export PATH="/usr/local/opt/sqlite/bin:$PATH"
# For compilers to find sqlite you may need to set:
#export LDFLAGS="-L/usr/local/opt/sqlite/lib"
#export CPPFLAGS="-I/usr/local/opt/sqlite/include"
# For pkg-config to find sqlite you may need to set:
#export PKG_CONFIG_PATH="/usr/local/opt/sqlite/lib/pkgconfig"
## python
# Python has been installed as
#  /usr/local/bin/python3
# Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to
# `python3`, `python3-config`, `pip3` etc., respectively, have been installed into
#   /usr/local/opt/python@3.8/libexec/bin
# You can install Python packages with
#   pip3 install <package>
# They will install into the site-package directory
#   /usr/local/lib/python3.8/site-packages
# See: https://docs.brew.sh/Homebrew-and-Python
## ruby
# By default, binaries installed by gem will be placed into:
#   /usr/local/lib/ruby/gems/2.7.0/bin
# You may want to add this to your PATH.
# ruby is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.
# If you need to have ruby first in your PATH run:
#export PATH="/usr/local/opt/ruby/bin:$PATH"
# For compilers to find ruby you may need to set:
#export LDFLAGS="-L/usr/local/opt/ruby/lib"
#export CPPFLAGS="-I/usr/local/opt/ruby/include"
# For pkg-config to find ruby you may need to set:
#export PKG_CONFIG_PATH="/usr/local/opt/ruby/lib/pkgconfig"
## glib
# Bash completion has been installed to:
#   /usr/local/etc/bash_completion.d
## libtool
# In order to prevent conflicts with Apple's own libtool we have prepended a "g"
# so, you have instead: glibtool and glibtoolize.
## icu4c
# icu4c is keg-only, which means it was not symlinked into /usr/local,
# because macOS provides libicucore.dylib (but nothing else).
# If you need to have icu4c first in your PATH run:
#echo 'export PATH="/usr/local/opt/icu4c/bin:$PATH"' >> ~/.zshrc
#echo 'export PATH="/usr/local/opt/icu4c/sbin:$PATH"' >> ~/.zshrc
# For compilers to find icu4c you may need to set:
#export LDFLAGS="-L/usr/local/opt/icu4c/lib"
#export CPPFLAGS="-I/usr/local/opt/icu4c/include"
# For pkg-config to find icu4c you may need to set:
#export PKG_CONFIG_PATH="/usr/local/opt/icu4c/lib/pkgconfig"
## fontforge
# This formula only installs the command line utilities.
# FontForge.app can be downloaded directly from the website:
#   https://fontforge.github.io
# Alternatively, install with Homebrew Cask:
#   brew cask install fontforge

# Kotlin
if [ -d ~/.local/kotlin ]; then
  export KTROOT=~/.local/kotlin
  export PATH="$PATH:$KTROOT/bin"
fi

# Language
# You may need to manually set your language environment
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Krew
[[ -d "${HOME}/.krew/bin" ]] && export PATH="${PATH}:${HOME}/.krew/bin"

# Kubernetes
which kubectl > /dev/null && source <(kubectl completion zsh) || true

# Minio client
if [ -s ~/bin/mc ]; then
  autoload -U +X bashcompinit && bashcompinit
  complete -o nospace -C ~/bin/mc mc
fi

# NVM
if [ -s ~/.nvm/nvm.sh ]; then
  export NVM_DIR=~/.nvm
  source $NVM_DIR/nvm.sh
fi

# Perlbrew
[[ -s ~/.perlbrew/etc/zshrc ]] && source ~/./perlbrew/etc/zshrc || true

# Pyenv
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
elif [ -d ~/.pyenv/bin ]; then
    export PATH="$HOME/.pyenv/bin:$PATH"
    eval "$(pyenv init -)"
fi

# RVM
if [ -s ~/.rvm/scripts/rvm ]; then
  export rvm_ignore_gemrc_issues=1
  source ~/.rvm/scripts/rvm
fi

# Starship
# Run the following command to enable starship
# echo "export ENABLE_STARSHIP=yes" >> ~/.zprofile
[ -n "$ENABLE_STARSHIP" ] && which starship > /dev/null && eval "$(starship init zsh)"

# Tmux
# Have tmux respect active venv when splitting panes
if [ -n "$VIRTUAL_ENV" ]; then
  source $VIRTUAL_ENV/bin/activate
fi
if [[ -n "$TMUX" && -n "$VIRTUAL_ENV" ]]; then
  tmux set-environment VIRTUAL_ENV $VIRTUAL_ENV
fi

# Deduplicate PATH
export -U PATH

# Functions

# body()
# print the header (the first line of input)
# and then run the specified command on the body (the rest of the input)
# use it in a pipeline, e.g. ps | body grep somepattern
body() {
    IFS= read -r header
    printf '%s\n' "$header"
    "$@"
}
