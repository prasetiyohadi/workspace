# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="clean"

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="false"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
export UPDATE_ZSH_DAYS=7

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
    history-substring-search
    kubectl
    zsh-autosuggestions
    zsh-syntax-highlighting
)
bindkey '^ ' autosuggest-accept

source $ZSH/oh-my-zsh.sh

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Bat
alias bat='batcat'

# Clipboard access
alias pbcopy='xsel --clipboard --input'
alias pbpaste='xsel --clipboard --output'

# Current working directory (cwd)
alias cwd='pwd | awk -F/ "{print \$NF}"'

# Docker
alias dexit='docker exec -it'
alias dex='docker exec'
alias drund='docker run -d --rm'
alias drunit="docker run -d --entrypoint '' --init --rm"

# Proxy
PROXY_SRC='http://167.205.50.80:39154'
NO_PROXY_SRC='"localhost,127.0.0.1,itb.ac.id,.itb.ac.id,167.205."'
alias proxy_up='export ftp_proxy=$PROXY_SRC http_proxy=$PROXY_SRC https_proxy=$PROXY_SRC no_proxy=$NO_PROXY_SRC'
alias proxy_down='unset ftp_proxy http_proxy https_proxy no_proxy'

# Virtualenv
alias python_up='[ -s ~/python/bin/activate ] && source ~/python/bin/activate'
alias python_down='deactivate'

# Which
alias '?'='which'

# User configuration

# Ansible
export ANSIBLE_NOCOWS=1

# Ansible ARA
#export ara_location=$(python -c "import os,ara; print(os.path.dirname(ara.__file__))")
#export ANSIBLE_CALLBACK_PLUGINS=$ANSIBLE_CALLBACK_PLUGINS:$ara_location/plugins/callbacks
#export ANSIBLE_ACTION_PLUGINS=$ANSIBLE_ACTION_PLUGINS:$ara_location/plugins/actions
#export ANSIBLE_LIBRARY=$ANSIBLE_LIBRARY:$ara_location/plugins/modules

# Bitbucket
export BB=~/projects/src/bitbucket.org

# Compilation flags
export ARCHFLAGS="-arch x86_64"

# Deno
if [ -f ~/.deno/bin/deno ]; then
    export DENO_INSTALL=~/.deno
    export PATH="$PATH:$DENO_INSTALL/bin"
    mkdir -p ~/.oh-my-zsh/custom/plugins/deno
    deno completions zsh > ~/.oh-my-zsh/custom/plugins/deno/_deno
fi

# Editor
# Preferred editor for local and remote sessions
export EDITOR='vim'
export VISUAL="vim"

# FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh || true

# Github
export GH=~/projects/src/github.com

# Gitlab
export GL=~/projects/src/gitlab.com
export GBL=~/projects/src/gitlab.cloud.bukalapak.io
export GBLP=~/projects/src/gitlab.preprod.bukalapak.io

# Google Cloud SDK
# The next line updates PATH for the Google Cloud SDK.
if [ -f ~/.local/google-cloud-sdk/path.zsh.inc ]; then . ~/.local/google-cloud-sdk/path.zsh.inc; fi
# The next line enables shell command completion for gcloud.
if [ -f ~/.local/google-cloud-sdk/completion.zsh.inc ]; then . ~/.local/google-cloud-sdk/completion.zsh.inc; fi

# Golang
if [ -d ~/.local/go ] && [ -d ~/go ]; then
    export GOROOT=~/.local/go
    export GOPATH=~/go
    export PATH="$PATH:$GOROOT/bin:$GOPATH/bin"
fi

# GPG
if [[ ! "$(echo $OSTYPE | tr -d '[:digit:][:punct:]')" == "darwin" ]]; then
    [[ ! -n "${GPG_TTY+1}" ]] && export GPG_TTY=$(tty)
    [[ ! -n "${SSH_AUTH_SOCK+1}" ]] && export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
fi

# GRC
# Run the following command to enable GRC
# echo "export ENABLE_GRC=yes" >> ~/.zprofile
[[ -n "$ENABLE_GRC" && -s "/etc/grc.zsh" ]] && source /etc/grc.zsh || true

# Julia
if [ -d ~/.local/julia ]; then
    export JULIAROOT=~/.local/julia
    export PATH="$PATH:$JULIAROOT/bin"
fi

# Kotlin
if [ -d ~/.local/kotlin ]; then
    export KTROOT=~/.local/kotlin
    export PATH="$PATH:$KTROOT/bin"
fi

# Krew
[[ -d "${HOME}/.krew/bin" ]] && export PATH="${PATH}:${HOME}/.krew/bin"

# Kubernetes
which kubectl > /dev/null && source <(kubectl completion zsh) || true

# Language
# You may need to manually set your language environment
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Minio client
if [ -s ~/bin/mc ]; then
    autoload -U +X bashcompinit && bashcompinit
    complete -o nospace -C ~/bin/mc mc
fi

# Nix
if [ -e ~/.nix-profile/etc/profile.d/nix.sh ]; then . ~/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer

# Nix: Direnv
which direnv > /dev/null && eval "$(direnv hook zsh)"

# NVM
if [ -s ~/.nvm/nvm.sh ]; then
    export NVM_DIR=~/.nvm
    source $NVM_DIR/nvm.sh
fi

# Perlbrew
[[ -s ~/.perlbrew/etc/zshrc ]] && source ~/./perlbrew/etc/zshrc || true

# Poetry
[[ -d "${HOME}/.poetry/bin" ]] && export PATH="$HOME/.poetry/bin:$PATH"

# Pyenv
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
elif [ -d ~/.pyenv/bin ]; then
    export PATH="$HOME/.pyenv/bin:$PATH"
    eval "$(pyenv init -)"
fi

# RVM
if [ -s ~/.rvm/scripts/rvm ]; then
    export rvm_ignore_gemrc_issues=1
    export rvm_silence_path_mismatch_check_flag=1
    source ~/.rvm/scripts/rvm
    # Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
    export PATH="$PATH:$HOME/.rvm/bin"
fi

# Starship
# Run the following command to enable starship
# echo "export ENABLE_STARSHIP=yes" >> ~/.zprofile
[ -n "$ENABLE_STARSHIP" ] && which starship > /dev/null && eval "$(starship init zsh)"

# Terraform
if [ -s ~/bin/terraform ]; then
    autoload -U +X bashcompinit && bashcompinit
    complete -o nospace -C ~/bin/terraform terraform
fi

# Tmux
# Have tmux respect active venv when splitting panes
if [[ -n "${VIRTUAL_ENV+1}" ]]; then
    source $VIRTUAL_ENV/bin/activate
fi
if [[ -n "${TMUX+1}" && -n "${VIRTUAL_ENV+1}" ]]; then
    tmux set-environment VIRTUAL_ENV $VIRTUAL_ENV
fi
if [[ -n "${TMUX+1}" && -n "${SSH_AUTH_SOCK+1}" ]]; then
    tmux set-environment SSH_AUTH_SOCK $SSH_AUTH_SOCK
fi

# Deduplicate PATH
export -U PATH

# Functions

# body()
# print the header (the first line of input)
# and then run the specified command on the body (the rest of the input)
# use it in a pipeline, e.g. ps | body grep somepattern
body() {
    IFS= read -r header
    printf '%s\n' "$header"
    "$@"
}
